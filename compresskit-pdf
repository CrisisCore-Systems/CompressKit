#!/bin/bash

# Configuration and Setup
VERSION="2.0"
INSTALL_DIR="/data/data/com.termux/files/usr"
CONFIG_DIR="$INSTALL_DIR/etc/pdfcompress"
CONFIG_FILE="$CONFIG_DIR/pdfcompress.conf"
TEMP_DIR="/data/data/com.termux/files/usr/tmp/pdfcompress"
LOG_DIR="/data/data/com.termux/files/usr/var/log/pdfcompress"
LOG_FILE="$LOG_DIR/compress.log"
BACKUP_DIR="$HOME/pdf_backups"

# ANSI color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Installation function
install_tool() {
    echo -e "${BLUE}Installing PDF Compressor...${NC}"
    
    # Create necessary directories
    mkdir -p "$CONFIG_DIR" "$LOG_DIR" "$TEMP_DIR"
    
    # Create default configuration
    cat > "$CONFIG_FILE" << EOF
DEFAULT_QUALITY=medium
DEFAULT_BACKUP_DIR=$BACKUP_DIR
LOG_DIR=$LOG_DIR
TEMP_DIR=$TEMP_DIR
EOF
    
    # Install dependencies
    pkg update
    pkg install -y ghostscript file pv bc imagemagick
    
    echo -e "${GREEN}Installation complete!${NC}"
    exit 0
}

# Uninstall function
uninstall_tool() {
    echo -e "${YELLOW}Uninstalling PDF Compressor...${NC}"
    rm -rf "$CONFIG_DIR" "$LOG_DIR" "$TEMP_DIR"
    echo -e "${GREEN}Uninstallation complete!${NC}"
    exit 0
}

# Logging function
log() {
    local level="$1"
    local message="$2"
    local timestamp=$(date "+%Y-%m-%d %H:%M:%S")
    mkdir -p "$(dirname "$LOG_FILE")"
    echo -e "${timestamp} [${level}] ${message}" >> "$LOG_FILE"
}

# Error handling
error_handler() {
    local exit_code=$?
    local line_number=$1
    if [ $exit_code -ne 0 ]; then
        log "ERROR" "Failed at line ${line_number} with exit code ${exit_code}"
        echo -e "${RED}An error occurred. Check ${LOG_FILE} for details.${NC}"
        cleanup
        exit $exit_code
    fi
}
trap 'error_handler ${LINENO}' ERR

# Cleanup function
cleanup() {
    if [ -d "$TEMP_DIR" ]; then
        rm -rf "$TEMP_DIR"/*
    fi
}

# Progress spinner
spinner() {
    local pid=$1
    local delay=0.1
    local spinstr='|/-\'
    while [ "$(ps a | awk '{print $1}' | grep $pid)" ]; do
        local temp=${spinstr#?}
        printf " [%c]  " "$spinstr"
        local spinstr=$temp${spinstr%"$temp"}
        sleep $delay
        printf "\b\b\b\b\b\b"
    done
    printf "    \b\b\b\b"
}

# Dependency checking
check_dependencies() {
    local deps=(
        "ghostscript"
        "file"
        "pv"
        "bc"
        "imagemagick"
    )
    
    echo -e "${BLUE}Checking dependencies...${NC}"
    for dep in "${deps[@]}"; do
        if ! command -v "$dep" &> /dev/null; then
            echo -e "${YELLOW}Installing $dep...${NC}"
            pkg update &> /dev/null
            pkg install -y "$dep" || {
                echo -e "${RED}Failed to install $dep${NC}"
                log "ERROR" "Failed to install dependency: $dep"
                exit 1
            }
        fi
    done
}

# PDF validation
validate_pdf() {
    local file="$1"
    
    if [[ ! -f "$file" ]]; then
        echo -e "${RED}Error: File '$file' not found${NC}"
        return 1
    fi
    
    local mime_type=$(file -b --mime-type "$file")
    if [[ "$mime_type" != "application/pdf" ]]; then
        echo -e "${RED}Error: '$file' is not a PDF file (detected: $mime_type)${NC}"
        return 1
    fi
    
    # Check if PDF is corrupted
    if ! gs -q -dNODISPLAY -dBATCH -dNOPAUSE -dPDFINFO "$file" &> /dev/null; then
        echo -e "${RED}Error: '$file' appears to be corrupted${NC}"
        return 1
    fi
    
    return 0
}

# PDF compression
compress_pdf() {
    local input_file="$1"
    local quality="$2"
    local optimization="$3"
    local output_file="${input_file%.*}_compressed.pdf"
    
    # Create backup
    if [[ "$BACKUP" == "true" ]]; then
        mkdir -p "$BACKUP_DIR"
        cp "$input_file" "$BACKUP_DIR/$(basename "$input_file").backup"
    fi
    
    # Quality settings
    case $quality in
        "ultra")
            settings="-dPDFSETTINGS=/screen -dColorImageDownsampleType=/Bicubic -dColorImageResolution=72"
            ;;
        "high")
            settings="-dPDFSETTINGS=/prepress -dColorImageDownsampleType=/Bicubic -dColorImageResolution=300"
            ;;
        "medium")
            settings="-dPDFSETTINGS=/ebook -dColorImageDownsampleType=/Bicubic -dColorImageResolution=150"
            ;;
        "low")
            settings="-dPDFSETTINGS=/screen -dColorImageDownsampleType=/Bicubic -dColorImageResolution=100"
            ;;
        *)
            settings="-dPDFSETTINGS=/ebook"
            ;;
    esac
    
    # Additional optimization options
    if [[ "$optimization" == "aggressive" ]]; then
        settings="$settings -dColorImageDownsampleThreshold=1.0 -dGrayImageDownsampleThreshold=1.0"
    fi
    
    # Create temporary directory
    mkdir -p "$TEMP_DIR"
    
    echo -e "${BLUE}Compressing PDF...${NC}"
    gs -sDEVICE=pdfwrite \
       -dCompatibilityLevel=1.4 \
       $settings \
       -dNOPAUSE -dQUIET -dBATCH \
       -sOutputFile="$output_file" \
       "$input_file" &> "$LOG_FILE" &
    
    spinner $!
    
    # Compare and display results
    if [ -f "$output_file" ]; then
        local original_size=$(stat -f %z "$input_file")
        local compressed_size=$(stat -f %z "$output_file")
        local savings=$(echo "scale=2; ($original_size - $compressed_size) * 100 / $original_size" | bc)
        
        echo -e "${GREEN}Compression complete!${NC}"
        echo -e "Original size: ${YELLOW}$(numfmt --to=iec-i --suffix=B $original_size)${NC}"
        echo -e "Compressed size: ${YELLOW}$(numfmt --to=iec-i --suffix=B $compressed_size)${NC}"
        echo -e "Space saved: ${YELLOW}${savings}%${NC}"
        
        log "INFO" "Compressed $input_file - Saved ${savings}%"
    else
        echo -e "${RED}Compression failed!${NC}"
        log "ERROR" "Compression failed for $input_file"
        return 1
    fi
}

# Help message
show_help() {
    cat << EOF
PDF Compressor v${VERSION}

Usage: $(basename $0) [options] <pdf_file>

Options:
    -q, --quality    Specify quality (ultra|high|medium|low) [default: medium]
    -o, --optimize   Enable aggressive optimization
    -b, --backup    Create backup before compression
    -h, --help      Show this help message
    -v, --version   Show version information
    --install      Install the tool system-wide
    --uninstall    Remove the tool from the system

Example:
    $(basename $0) -q high -o -b document.pdf

Report bugs to: github.com/your-repo/issues
EOF
}

# Main script
main() {
    # Initialize variables
    local QUALITY="medium"
    local OPTIMIZATION="normal"
    local BACKUP="false"
    local PDF_FILE=""
    
    # Parse command line arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            --install)
                install_tool
                ;;
            --uninstall)
                uninstall_tool
                ;;
            -q|--quality)
                QUALITY="$2"
                shift 2
                ;;
            -o|--optimize)
                OPTIMIZATION="aggressive"
                shift
                ;;
            -b|--backup)
                BACKUP="true"
                shift
                ;;
            -h|--help)
                show_help
                exit 0
                ;;
            -v|--version)
                echo "PDF Compressor version $VERSION"
                exit 0
                ;;
            *)
                PDF_FILE="$1"
                shift
                ;;
        esac
    done
    
    # Display banner
    echo -e "${BLUE}================================${NC}"
    echo -e "${BLUE}   Termux PDF Compressor v${VERSION}   ${NC}"
    echo -e "${BLUE}================================${NC}"
    
    # Validate input
    if [ -z "$PDF_FILE" ]; then
        echo -e "${RED}Error: No PDF file specified${NC}"
        show_help
        exit 1
    fi
    
    # Create necessary directories
    mkdir -p "$TEMP_DIR"
    
    # Load configuration if exists
    [ -f "$CONFIG_FILE" ] && source "$CONFIG_FILE"
    
    # Check dependencies
    check_dependencies
    
    # Validate and compress PDF
    if validate_pdf "$PDF_FILE"; then
        compress_pdf "$PDF_FILE" "$QUALITY" "$OPTIMIZATION"
    else
        exit 1
    fi
    
    # Cleanup
    cleanup
}

# Execute main function with all arguments
main "$@"
